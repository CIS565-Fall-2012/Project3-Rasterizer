<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup Condition="'$(CudaCompileBeforeTargets)' == '' and '$(CudaCompileAfterTargets)' == '' and '$(ConfigurationType)' != 'Makefile'">
        <CudaCompileBeforeTargets>Midl</CudaCompileBeforeTargets>
        <CudaCompileAfterTargets>CustomBuild</CudaCompileAfterTargets>
    </PropertyGroup>

    <PropertyGroup>
        <CudaToolkitDir Condition="'$(CudaToolkitDir)' == ''">$(CudaToolkitCustomDir)</CudaToolkitDir>
        <CudaToolkitVersion>v4.0</CudaToolkitVersion>
        <CudaToolkitFullVersion>4.00.0000.0000</CudaToolkitFullVersion>
    </PropertyGroup>

    <PropertyGroup>
        <!-- Check CUDA Toolkit versioned environment variable. -->
        <CudaToolkitDir Condition="'$(CudaToolkitDir)' == ''">$(CUDA_PATH_V4_0)</CudaToolkitDir>

        <!-- Last, check the new CUDA Toolkit style/Nsight toolkit registry value. -->
        <CudaToolkitDir Condition="'$(CudaToolkitDir)' == ''">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\NVIDIA Corporation\GPU Computing Toolkit\Cuda\$(CudaToolkitVersion)', 'InstallDir', null, RegistryView.Registry64, RegistryView.Registry32))</CudaToolkitDir>

        <!-- Ensure $(CudaToolkitDir) has a trailing backslash. -->
        <CudaToolkitDir Condition="'$(CudaToolkitDir)' != '' AND !HasTrailingSlash('$(CudaToolkitDir)')">$(CudaToolkitDir)\</CudaToolkitDir>

        <CudaToolkitIncludeDir Condition="'$(CudaToolkitIncludeDir)' == ''">$(CudaToolkitDir)include</CudaToolkitIncludeDir>
    </PropertyGroup>

    <PropertyGroup Condition="'$(Platform)' == 'Win32'">
        <CudaToolkitBinDir Condition="'$(CudaToolkitBinDir)' == ''">$(CudaToolkitDir)bin</CudaToolkitBinDir>

        <CudaToolkitLibDir Condition="'$(CudaToolkitLibDir)' == '' AND Exists('$(CudaToolkitDir)lib\Win32')">$(CudaToolkitDir)lib\Win32</CudaToolkitLibDir>
        <CudaToolkitLibDir Condition="'$(CudaToolkitLibDir)' == ''">$(CudaToolkitDir)lib</CudaToolkitLibDir>
    </PropertyGroup>

    <PropertyGroup Condition="'$(Platform)' == 'x64'">
        <CudaToolkitBinDir Condition="'$(CudaToolkitBinDir)' == '' AND Exists('$(CudaToolkitDir)bin64')">$(CudaToolkitDir)bin64</CudaToolkitBinDir>
        <CudaToolkitBinDir Condition="'$(CudaToolkitBinDir)' == ''">$(CudaToolkitDir)bin</CudaToolkitBinDir>

        <CudaToolkitLibDir Condition="'$(CudaToolkitLibDir)' == '' AND Exists('$(CudaToolkitDir)lib\x64')">$(CudaToolkitDir)lib\x64</CudaToolkitLibDir>
        <CudaToolkitLibDir Condition="'$(CudaToolkitLibDir)' == ''">$(CudaToolkitDir)lib64</CudaToolkitLibDir>
    </PropertyGroup>

    <PropertyGroup>
        <CudaToolkitNvccPath Condition="'$(CudaToolkitNvccPath)' == ''">$(CudaToolkitBinDir)\nvcc.exe</CudaToolkitNvccPath>

        <CudaClVersion Condition="'$(PlatformToolset)' == 'v90'">2008</CudaClVersion>
        <CudaClVersion Condition="'$(PlatformToolset)' == 'v100'">2010</CudaClVersion>

        <CudaLogStandardErrorAsError>false</CudaLogStandardErrorAsError>

        <CudaIntDir>$(IntDir)</CudaIntDir>
        <CudaIntDir Condition="HasTrailingSlash('$(CudaIntDir)')">$(CudaIntDir.Trim('\'))</CudaIntDir>
    </PropertyGroup>

    <ItemDefinitionGroup>
        <CudaCompile>
            <!-- Project schema: Common properties -->
            <CompileOut>$(IntDir)%(Filename)%(Extension).obj</CompileOut>
            <!-- <Include></Include> -->
            <Keep>false</Keep>
            <KeepDir>$(CudaIntDir)</KeepDir>
            <NvccCompilation>compile</NvccCompilation>
            <TargetMachinePlatform>32</TargetMachinePlatform>

            <!-- Project schema: Driver properties -->
            <CInterleavedPTX>false</CInterleavedPTX>
            <CodeGeneration>compute_10,sm_10</CodeGeneration>
            <GPUDebugInfo Condition="'$(Configuration)' == 'Debug'">true</GPUDebugInfo>
            <GPUDebugInfo Condition="'$(Configuration)' != 'Debug'">false</GPUDebugInfo>
            <MaxRegCount>0</MaxRegCount>
            <PtxAsOptionV>false</PtxAsOptionV>

            <!-- Project schema: Host properties -->
            <!-- <Defines></Defines> -->
            <Emulation>false</Emulation>
            <HostDebugInfo Condition="'$(Configuration)' == 'Debug'">true</HostDebugInfo>
            <HostDebugInfo Condition="'$(Configuration)' != 'Debug'">false</HostDebugInfo>
            <FastMath>false</FastMath>
            <Optimization>Od</Optimization>
            <Runtime Condition="'$(Configuration)' == 'Debug'">MDd</Runtime>
            <Runtime Condition="'$(Configuration)' != 'Debug'">MD</Runtime>
            <RuntimeChecks>Default</RuntimeChecks>
            <TypeInfo>false</TypeInfo>
            <Warning>W3</Warning>

            <!-- Project schema: Command line properties -->
            <!-- <AdditionalOptions></AdditionalOptions> -->

            <!-- Added so that the correct platform's bin directory is used for ccbin -->
            <VCBinDir Condition="'$(Platform)' == 'Win32'">$(VCInstallDir)bin</VCBinDir>
            <VCBinDir Condition="'$(Platform)' == 'x64'">$(VCInstallDir)bin\x86_amd64</VCBinDir>
            <VCBinDir Condition="'$(Platform)' == 'x64' AND '$(PROCESSOR_ARCHITECTURE)' == 'AMD64'">$(VCInstallDir)bin\amd64</VCBinDir>

            <BaseCommandLineTemplate>-ccbin "%(VCBinDir)" [Include] [RequiredIncludes] [CInterleavedPTX] [GPUDebugInfo] [Keep] [KeepDir] [MaxRegCount] [PtxAsOptionV] [TargetMachinePlatform] [NvccCompilation] [AdditionalOptions]</BaseCommandLineTemplate>
            <BuildCommandLineTemplate>--use-local-env --cl-version $(CudaClVersion)</BuildCommandLineTemplate>
            <BuildDynamicCommandLineTemplate>[CodeGeneration]</BuildDynamicCommandLineTemplate>
            <CleanCommandLineTemplate>-clean</CleanCommandLineTemplate>
            <HostCommandLineTemplate>-Xcompiler &quot;/EHsc /nologo [Optimization] /Zi [RuntimeChecks] [Runtime] [TypeInfo]&quot;</HostCommandLineTemplate>

            <DriverApiCommandLineTemplate>%(BaseCommandLineTemplate) -o "[CompileOut]" "%(FullPath)"</DriverApiCommandLineTemplate>
            <RuntimeApiCommandLineTemplate>%(BaseCommandLineTemplate) [HostDebugInfo] [Emulation] [FastMath] [Defines] %(HostCommandLineTemplate) -o "[CompileOut]" "%(FullPath)"</RuntimeApiCommandLineTemplate>

            <CommandLineTemplate>
# (Approximate command-line, please see the output window after a build for the full command-line)

# Driver API (NVCC Compilation Type is .cubin, .gpu, or .ptx)
set CUDAFE_FLAGS=--sdk_dir "$(WindowsSdkDir)"
"$(CudaToolkitNvccPath)" %(BuildCommandLineTemplate) %(DriverApiCommandLineTemplate)

# Runtime API (NVCC Compilation Type is hybrid object or .c file)
set CUDAFE_FLAGS=--sdk_dir "$(WindowsSdkDir)"
"$(CudaToolkitNvccPath)" %(BuildCommandLineTemplate) %(RuntimeApiCommandLineTemplate)
            </CommandLineTemplate>
            <ExecutionDescription>Compiling CUDA source file %(Identity)...</ExecutionDescription>
            <ExclusionDescription>Skipping CUDA source file %(Identity) (excluded from build).</ExclusionDescription>

            <!-- Miscellaneous -->
            <DepsOutputFile>%(Filename)%(Extension).deps</DepsOutputFile>
            <DepsOutputPath>$(IntDir)%(DepsOutputFile)</DepsOutputPath>

            <PropsCacheOutputFile>%(Filename)%(Extension).cache</PropsCacheOutputFile>
            <PropsCacheOutputPath>$(IntDir)%(PropsCacheOutputFile)</PropsCacheOutputPath>
        </CudaCompile>

        <Link>
            <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories);$(CudaToolkitLibDir)</AdditionalLibraryDirectories>
        </Link>

        <ClCompile>
            <AdditionalIncludeDirectories>%(AdditionalIncludeDirectories);$(CudaToolkitIncludeDir)</AdditionalIncludeDirectories>
        </ClCompile>
    </ItemDefinitionGroup>
</Project>
